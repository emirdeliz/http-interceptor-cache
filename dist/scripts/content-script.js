(()=>{const n="http-interceptor-update-state",t="http-interceptor-get-state",e="http-interceptor-cache-extension-enabled";function a({channel:n,message:t,callback:e}){const a=n instanceof BroadcastChannel,c=a?n:new BroadcastChannel(n),o=a?n.name:n,s=JSON.parse(JSON.stringify(t||{channel:""}));s.channel=o,c.postMessage(s),a||c.close(),e&&e()}function c({channel:n,callback:t}){const e=new BroadcastChannel(n);return e.onmessage=function(n){return t&&t(n)},e}function o({channel:n,message:t,callback:e}){const{key:o}=t||{},s=c({channel:`${n}-${o||"ALL"}`,callback:function(n){e&&e(n,t),s.close()}});a({channel:n,message:t})}async function s(n){return new Promise((function(e,a){try{o({channel:t,message:{key:n},callback:function(t){e(t.data[n])}})}catch(n){console.warn("Error - GET cache: ",n),a("Error - GET cache")}}))}async function r(t,e){return new Promise((function(c,o){try{a({channel:n,message:{key:t,value:e},callback:c})}catch(n){console.warn("Error - SET cache: ",n),o("Error - SET cache")}}))}let i={};async function l(n,t){const e=await s(n);return e&&(console.log(`Endpoint ${n} found in cache...`),Object.defineProperty(t,"response",{value:e,writable:!1}),t.readyState=XMLHttpRequest.DONE,t.status=200,t.onload&&t.onload({}),t.onreadystatechange&&t.onreadystatechange()),!!e}async function h(n,t){console.log(`Endpoint ${n} added in cache...`);const e=new Blob([t]);await r(n,new Response(e,{status:200}))}o({channel:t,callback:function(n){i=n.data}}),c({channel:`${n}-${e}`,callback:function(n){i[e]=n.data.value}});const u=window.XMLHttpRequest.prototype.open;window.XMLHttpRequest.prototype.open=function(){const n=arguments[0]||"GET",t=arguments[1];this.url=t,this.method=n.toUpperCase(),u.apply(this,[].slice.call(arguments))};const p=window.XMLHttpRequest.prototype.send;window.XMLHttpRequest.prototype.send=async function(n){const t=this.url,a=this.method,c=i[e],o=!i[a],s=i["http-interceptor-cache-extension-regex"],r=!s||new RegExp(s,"g").test(t),u=c&&r&&!o;if(u){if(await l(t,this))return void this.abort()}const d=this.onload;this.onload=async function(n){return u&&await h(this.url,this.response),d&&d(this,n)},p.call(this,n)}})();